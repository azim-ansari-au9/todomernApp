{"ast":null,"code":"import _objectSpread from\"C:/Users/AZIM ANSARI/Desktop/azim-ansari-au9/fprtTest/fprtMERNAPP/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/AZIM ANSARI/Desktop/azim-ansari-au9/fprtTest/fprtMERNAPP/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState,useEffect}from'react';import{useSelector,useDispatch}from'react-redux';import{Draggable,Droppable}from'react-beautiful-dnd';import{getList}from'../../actions/board';import ListTitle from'./ListTitle';import ListMenu from'./ListMenu';import Card from'../card/Card';import CreateCardForm from'./CreateCardForm';import Button from'@material-ui/core/Button';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var List=function List(_ref){var listId=_ref.listId,index=_ref.index;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),addingCard=_useState2[0],setAddingCard=_useState2[1];var list=useSelector(function(state){return state.board.board.listObjects.find(function(object){return object._id===listId;});});var dispatch=useDispatch();useEffect(function(){dispatch(getList(listId));},[dispatch,listId]);var createCardFormRef=useRef(null);useEffect(function(){addingCard&&createCardFormRef.current.scrollIntoView();},[addingCard]);return!list||list&&list.archived?'':/*#__PURE__*/_jsx(Draggable,{draggableId:listId,index:index,children:function children(provided){return/*#__PURE__*/_jsxs(\"div\",_objectSpread(_objectSpread(_objectSpread({className:\"list-wrapper\"},provided.draggableProps),provided.dragHandleProps),{},{ref:provided.innerRef,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"list-top\",children:[/*#__PURE__*/_jsx(ListTitle,{list:list}),/*#__PURE__*/_jsx(ListMenu,{listId:listId})]}),/*#__PURE__*/_jsx(Droppable,{droppableId:listId,type:\"card\",children:function children(provided){return/*#__PURE__*/_jsxs(\"div\",_objectSpread(_objectSpread({className:\"list \".concat(addingCard?'adding-card':'not-adding-card')},provided.droppableProps),{},{ref:provided.innerRef,children:[/*#__PURE__*/_jsx(\"div\",{className:\"cards\",children:list.cards.map(function(cardId,index){return/*#__PURE__*/_jsx(Card,{cardId:cardId,list:list,index:index},cardId);})}),provided.placeholder,addingCard&&/*#__PURE__*/_jsx(\"div\",{ref:createCardFormRef,children:/*#__PURE__*/_jsx(CreateCardForm,{listId:listId,setAdding:setAddingCard})})]}));}}),!addingCard&&/*#__PURE__*/_jsx(\"div\",{className:\"create-card-button\",children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:function onClick(){return setAddingCard(true);},children:\"+ Add a card\"})})]}));}});};export default List;","map":{"version":3,"sources":["C:/Users/AZIM ANSARI/Desktop/azim-ansari-au9/fprtTest/fprtMERNAPP/client/src/components/list/List.js"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","Draggable","Droppable","getList","ListTitle","ListMenu","Card","CreateCardForm","Button","List","listId","index","addingCard","setAddingCard","list","state","board","listObjects","find","object","_id","dispatch","createCardFormRef","current","scrollIntoView","archived","provided","draggableProps","dragHandleProps","innerRef","droppableProps","cards","map","cardId","placeholder"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport { getList } from '../../actions/board';\r\nimport ListTitle from './ListTitle';\r\nimport ListMenu from './ListMenu';\r\nimport Card from '../card/Card';\r\nimport CreateCardForm from './CreateCardForm';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst List = ({ listId, index }) => {\r\n  const [addingCard, setAddingCard] = useState(false);\r\n  const list = useSelector((state) =>\r\n    state.board.board.listObjects.find((object) => object._id === listId)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getList(listId));\r\n  }, [dispatch, listId]);\r\n\r\n  const createCardFormRef = useRef(null);\r\n  useEffect(() => {\r\n    addingCard && createCardFormRef.current.scrollIntoView();\r\n  }, [addingCard]);\r\n\r\n  return !list || (list && list.archived) ? (\r\n    ''\r\n  ) : (\r\n    <Draggable draggableId={listId} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          className='list-wrapper'\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <div className='list-top'>\r\n            <ListTitle list={list} />\r\n            <ListMenu listId={listId} />\r\n          </div>\r\n          <Droppable droppableId={listId} type='card'>\r\n            {(provided) => (\r\n              <div\r\n                className={`list ${addingCard ? 'adding-card' : 'not-adding-card'}`}\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                <div className='cards'>\r\n                  {list.cards.map((cardId, index) => (\r\n                    <Card key={cardId} cardId={cardId} list={list} index={index} />\r\n                  ))}\r\n                </div>\r\n                {provided.placeholder}\r\n                {addingCard && (\r\n                  <div ref={createCardFormRef}>\r\n                    <CreateCardForm listId={listId} setAdding={setAddingCard} />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n          {!addingCard && (\r\n            <div className='create-card-button'>\r\n              <Button variant='contained' onClick={() => setAddingCard(true)}>\r\n                + Add a card\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nList.propTypes = {\r\n  listId: PropTypes.string.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default List;\r\n"]},"metadata":{},"sourceType":"module"}